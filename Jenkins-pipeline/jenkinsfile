pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'DockerHub_Cred'
        DOCKER_IMAGE_NAME = 'touhidjnu/react-app1'
        APP_DIRECTORY = '/var/www/app/'
        CONTAINER_NAME = 'touhid-container'
        }

       stages {
        stage('Pull Code') {
            steps {
                git branch: 'main', credentialsId: 'GitHub_Cred', url: 'https://github.com/touhid101/Final-Exam.git'
            }
        }

        stage('Display Files') {
            steps {
                sh 'ls -la'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    def timestamp = new Date().format('dd-MM-HH-mm', TimeZone.getTimeZone('BDT'))
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}-${timestamp}" // Define imageTag as an environment variable
                    sh "docker build -t ${env.DOCKER_IMAGE_NAME}:${env.IMAGE_TAG} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DockerHub_Cred', passwordVariable: 'DHPASSWORD', usernameVariable: 'DHUNAME')]) {
                        // Login to Docker Hub
                        sh "echo $DHPASSWORD | docker login -u $DHUNAME --password-stdin"
                        // Push the Docker image
                        sh "docker push $DOCKER_IMAGE_NAME:${env.IMAGE_TAG}"
                        // Logout from Docker Hub
                        sh "docker logout"
                    }
                }
            }
        }

        stage('Run Docker Image') {
            steps {
                script {
                    echo 'Running Docker container...'
                    sh """
                       docker run -d --name ${env.CONTAINER_NAME} ${env.DOCKER_IMAGE_NAME}:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('Restart Docker Containers') {
            steps {
                // Navigate to the application directory and restart containers
                dir(APP_DIRECTORY) {
                    sh "docker stop ${env.CONTAINER_NAME}"
                    sh "docker start ${env.CONTAINER_NAME} "
                }
            }
        }
    }
}
